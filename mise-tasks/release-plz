#!/usr/bin/env bash
# shellcheck shell=bash
set -euxo pipefail

DRY_RUN="${DRY_RUN:-0}"

# Sub-crates are maintained as submodules; do not auto-publish from here
crates=(clx ensembler xx)

crate_version_published() {
  local crate="$1" version="$2"
  curl -fsS "https://crates.io/api/v1/crates/${crate}/${version}" >/dev/null 2>&1
}

publish_crate_if_needed() {
  echo "Sub-crate publishing is disabled; managed in their own repositories."
}

# Clone upstream repo for a sub-crate, bump its version and changelog, open a PR
process_subcrate_upstream() {
  local crate="$1"
  local upstream_url
  # Prefer repository URL from the crate's Cargo.toml
  upstream_url="$(grep '^repository\s*=\s*"' "$crate/Cargo.toml" | head -n1 | cut -d '"' -f2 || true)"
  if [[ -z "$upstream_url" ]]; then
    case "$crate" in
      clx) upstream_url="https://github.com/jdx/clx.git" ;;
      ensembler) upstream_url="https://github.com/jdx/ensembler.git" ;;
      xx) upstream_url="https://github.com/jdx/xx.git" ;;
      *) echo "Unknown upstream for $crate" ; return 0 ;;
    esac
  fi

  local tmpdir
  tmpdir="$(mktemp -d)"
  pushd "$tmpdir" >/dev/null
  git clone "$upstream_url" "$crate"
  cd "$crate"
  git fetch --tags --all

  # Detect if there are commits since last tag
  last_tag="$(git describe --tags --abbrev=0 --match 'v*' 2>/dev/null || true)"
  need_release=0
  if [[ -z "$last_tag" ]]; then
    if [[ -n "$(git rev-list --count HEAD)" ]]; then
      need_release=1
    fi
  else
    if [[ "$(git rev-list --count "${last_tag}..HEAD")" -gt 0 ]]; then
      need_release=1
    fi
  fi

  if [[ "$need_release" -eq 0 ]]; then
    echo "No new commits in upstream $crate; skipping"
    popd >/dev/null
    rm -rf "$tmpdir"
    return 0
  fi

  # Bump version and changelog on a branch
  branch_name="release/${crate}-bump"
  git checkout -B "$branch_name"
  cargo set-version --package "$crate" --bump patch
  new_version="$(grep '^version' Cargo.toml | head -n1 | cut -d '"' -f2)"
  git cliff --bump -o CHANGELOG.md
  git add Cargo.toml CHANGELOG.md
  git commit -m "chore: release v${new_version}"
  git push -u origin "$branch_name"

  # Open PR in the upstream repository
  gh pr create --title "chore: release v${new_version}" --body "Release ${crate} v${new_version}." || true

  # No auto-publish from this monorepo

  popd >/dev/null
  rm -rf "$tmpdir"
}

released_versions="$(git tag --list | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+)?$')"
cur_version="$(cargo pkgid hk | cut -d# -f2 | cut -d@ -f2)"
if ! echo "$released_versions" | grep -q "^v$cur_version$"; then
  echo "Releasing $cur_version"
  if [ "${DRY_RUN:-}" == 0 ]; then
    # Update submodules to latest commits on their default branches
    git submodule update --init --recursive
    git submodule foreach --recursive 'git fetch --tags --all || true'

    # Let upstream repos manage their own versioning and releases; open PRs only
    for crate in "${crates[@]}"; do process_subcrate_upstream "$crate"; done

    # Publish only the main crate from this repo
    changelog="$(git cliff --tag "v$cur_version" --strip all --unreleased)"
    git tag "v$cur_version"
    git push --tags
    gh release create "v$cur_version" --title "v$cur_version" --notes "$changelog"
  fi
  exit 0
fi

version="$(git cliff --bumped-version)"
changelog="$(git cliff --bump --unreleased --strip all)"

if [ "$DRY_RUN" -ne 0 ]; then
  echo "version: $version"
  echo "changelog: $changelog"
  exit 0
fi

# If there is no new version to bump (i.e., equal to current), skip creating a release PR
if [ "$version" = "v$cur_version" ]; then
  echo "No unreleased changes detected for hk; skipping release PR creation."
  exit 0
fi

git cliff --bump -o CHANGELOG.md
cargo set-version --package hk "${version#v}"

git config user.name mise-en-dev
git config user.email 123107610+mise-en-dev@users.noreply.github.com
cargo update

# Ensure submodules are initialized before creating the release PR
git submodule update --init --recursive

# Do not touch sub-crate versions/changelogs in this repository

# Regenerate rendered artifacts (CLI docs, usage, etc.) for the release
mise run render
git add \
  Cargo.* \
  CHANGELOG.md \
  docs \
  hk.usage.kdl \
  hk.pkl \
  src

git checkout -B release
git commit -m "chore: release $version"
git push origin release --force
gh pr create --title "chore: release $version" --body "$changelog" --label "release" ||
  gh pr edit --title "chore: release $version" --body "$changelog"

# No subtree push; submodules track external repos directly
